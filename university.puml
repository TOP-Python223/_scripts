@startuml

hide enum empty members
hide abstract empty members

enum Gender {
    MALE
    FEMALE
}
enum Grade {
    BACHELOR
    SPECIALIST
    MASTER
    CANDIDATE
    DOCTOR
}
enum EducationForm {
    INTRAMURAL
    EXTRAMURAL
    REMOTE
}
enum ClassForm {
    LECTURE
    SEMINAR
    PRACTICE
    LABWORK
    HOMEWORK
    TEST
    COLLOQUIUM
    EXAM
}


abstract class Organization {
    +name: str
    +address: str
    +contacts: dict[str, str]
    -head: Administrator
    -employees: list[Employee]
    #budget: Decimal
    __init__()
    __str__()
    +change_head()
    +hire_employee(candidate: Employee)
    +fire_employee(employee: Employee)
    +set_budget(amount: Decimal)
}
Organization <|-- University
Organization <|-- Dormitory
Organization <|-- Institute
Organization <|-- Department
Organization::head o-- Administrator
Organization::employees o-- Employee


class University {
    -branches: list[University]
    -institutes: list[Institute]
    +add_branch(*branches)
    +add_institute(*institutes)
}
University::branches o-- University
University::institutes o-- Institute


class Dormitory {
    +rooms: dict[str, list[Students]]
}
Dormitory::rooms o-- Student


class Institute {
    -departments: list[Department]
    +add_department(*departments)
}
Institute::departments "1" o-- "1…n" Department


class Department {
    -groups: list[Group]
    +add_group(group)
    +rem_group(group)
}
Department::groups "1" o-- "0…n" Group


abstract class list
list <|-- Group


class Group {
    +name: str
    +major: str
    +form: EducationForm
    -chief: Student
    -curator: Teacher
    __init__()
    __str__()
    +change_chief(student)
    +change_curator(curator)
    +apply_schedule(current_schedule)
}
Group *-- "слабая композиция" Student
Group::form *-- "слабая композиция" EducationForm
Group::chief "1" o-- "1" Student
Group::curator o-- Teacher


abstract class dict
dict <|-- Schedule


note "{datetime: Activity}" as schedule_description
class Schedule {
    +half_semester: int
    __str__()
    +change_class_date(from: datetime, to: datetime)
}
Schedule *-- "слабая композиция" Activity
Schedule ..up.. schedule_description


class Course {
    +name: str
    +hours: dict[ClassForm, int]
    __init__()
    __str__()
}


abstract class Activity {
    +course: Course
    +form: ClassForm
    +duration: timedelta
    +teacher: Teacher
    +visited: bool = False
    __init__()
    __str__()
}
Activity <|-- ClassActivity
Activity <|-- ControlActivity
Activity::course o-- Course
Activity::form *-- "слабая композиция" ClassForm
Activity::teacher o-- Teacher


class ClassActivity


class ControlActivity {
    -answer: str
    -grade: int
    __str__()
}


class Student {
    +group: Group
    -grant: Decimal
    +year: int = 1
    +dormitory: bool = False
    +current_schedule: Schedule
    __init__()
    __str__()
    +promote()
    +submit_answer()
}
Student::group "1…n" o-- "1" Group
Student::current_schedule *-- "слабая композиция" Schedule


class Teacher {
    +courses: list[Course]
    +professorship: bool = False
    __init__()
    __str__()
    +add_course(course_name: str)
    +rem_course(course_name: str)
    +grade_answer()
}
Teacher::courses o-- Course


class Researcher {
    +grade: Grade = MASTER
    __init__()
    __str__()
}
Researcher::grade *-- Grade


abstract class ProfessionalPersonnel {
    +previous_experience: int = 0
    +grade: Grade = BACHELOR
    .. properties ..
    +total_experience: int
    __
    __init__()
    __str__()
}
ProfessionalPersonnel <|-- Teacher
ProfessionalPersonnel <|-- Researcher
ProfessionalPersonnel::grade *-- "слабая композиция" Grade


class Administrator {
    +subordinates: list[Employee]
    __str__()
    +add_subordinate(person: Employee)
    +rem_subordinate(person: Employee)
}
Administrator::subordinates o-- Employee


class SecurityPersonnel
SecurityPersonnel : __str__()


class GeneralPersonnel
GeneralPersonnel : __str__()


abstract class Employee {
    +employment_date: date
    -salary: Decimal
    +position: str
    +supervisor: Administrator
    __init__()
    __str__()
}
Employee <|-- GeneralPersonnel
Employee <|-- SecurityPersonnel
Employee <|-- Administrator
Employee <|-- ProfessionalPersonnel
Employee::supervisor o-- Administrator


abstract class Person {
    +surname: str
    +name: str
    +patronymic: str
    +gender: Gender
    +birthdate: date
    __init__()
    __str__()
}
Person <|-- Student
Person <|-- Employee
Person::gender *-- "слабая композиция" Gender
'note bottom of Person
'    Все атрибуты задаются
'    с помощью параметров
'    конструктора
'end note

@enduml